// <auto-generated />
using System;
using ArslanProjectManager.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArslanProjectManager.Repository.Migrations
{
    [DbContext(typeof(ProjectManagerDbContext))]
    [Migration("20250626134021_ModifyDateAttributes")]
    partial class ModifyDateAttributes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArslanProjectManager.Core.Models.BoardTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("board_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BoardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("board_name");

                    b.Property<byte>("BoardOrder")
                        .HasColumnType("tinyint")
                        .HasColumnName("board_order");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("board_tag", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.LogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("log_category");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("log_category", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("ProjectDetail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_detail");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("project_name");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamId" }, "IX_project_team_id");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointeeId")
                        .HasColumnType("int")
                        .HasColumnName("appointee_id");

                    b.Property<int>("AppointerId")
                        .HasColumnType("int")
                        .HasColumnName("appointer_id");

                    b.Property<int>("BoardId")
                        .HasColumnType("int")
                        .HasColumnName("board_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<DateOnly?>("ExpectedEndDate")
                        .HasColumnType("date")
                        .HasColumnName("expected_end_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2)
                        .HasColumnName("priority");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("TaskCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("task_category_id");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("task_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppointeeId" }, "IX_project_task_appointee_id");

                    b.HasIndex(new[] { "AppointerId" }, "IX_project_task_appointer_id");

                    b.HasIndex(new[] { "BoardId" }, "IX_project_task_board_id");

                    b.HasIndex(new[] { "ProjectId" }, "IX_project_task_project_id");

                    b.HasIndex(new[] { "TaskCategoryId" }, "IX_project_task_task_category_id");

                    b.ToTable("project_task", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool?>("EditPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("edit_permission");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<bool?>("ViewPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("view_permission");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("task_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("task_category", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int>("TeamUserId")
                        .HasColumnType("int")
                        .HasColumnName("team_user_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TaskId" }, "IX_task_comment_task_id");

                    b.HasIndex(new[] { "TeamUserId" }, "IX_task_comment_team_user_id");

                    b.ToTable("task_comment", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AffectedTeamUserId")
                        .HasColumnType("int")
                        .HasColumnName("affected_team_user_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("LogCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("log_category_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<int>("TeamUserId")
                        .HasColumnType("int")
                        .HasColumnName("team_user_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex(new[] { "AffectedTeamUserId" }, "IX_task_log_affected_team_user_id");

                    b.HasIndex(new[] { "LogCategoryId" }, "IX_task_log_log_category_id");

                    b.HasIndex(new[] { "TeamUserId" }, "IX_task_log_team_user_id");

                    b.ToTable("task_log", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tag");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("task_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TaskId" }, "IX_task_tag_task_id");

                    b.ToTable("task_tag", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("team_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("team", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TeamInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("team_invite_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("invite_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<int>("InvitedById")
                        .HasColumnType("int")
                        .HasColumnName("invited_by_id");

                    b.Property<string>("InvitedEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("invited_email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("StatusChangeNote")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("status_change_note");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("status_change_date");

                    b.HasKey("Id");

                    b.HasIndex("InvitedById");

                    b.HasIndex("TeamId");

                    b.ToTable("team_invite", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TeamUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("team_user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_team_user_role_id");

                    b.HasIndex(new[] { "TeamId" }, "IX_team_user_team_id");

                    b.HasIndex(new[] { "UserId" }, "IX_team_user_user_id");

                    b.ToTable("team_user", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Token", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_token_user_id");

                    b.ToTable("token", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("register_date")
                        .HasDefaultValueSql("(GETUTCDATE())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("ProfilePictureUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValue("profile.png")
                        .HasColumnName("profile_picture_url");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Project", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.ProjectTask", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.TeamUser", "Appointee")
                        .WithMany("ProjectTaskAppointees")
                        .HasForeignKey("AppointeeId")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.TeamUser", "Appointer")
                        .WithMany("ProjectTaskAppointers")
                        .HasForeignKey("AppointerId")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.BoardTag", "Board")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("BoardId")
                        .IsRequired()
                        .HasConstraintName("FK_task_board_tag");

                    b.HasOne("ArslanProjectManager.Core.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_task_project");

                    b.HasOne("ArslanProjectManager.Core.Models.TaskCategory", "TaskCategory")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("TaskCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_task_task_category");

                    b.Navigation("Appointee");

                    b.Navigation("Appointer");

                    b.Navigation("Board");

                    b.Navigation("Project");

                    b.Navigation("TaskCategory");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskComment", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.ProjectTask", "Task")
                        .WithMany("TaskComments")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.TeamUser", "TeamUser")
                        .WithMany("TaskComments")
                        .HasForeignKey("TeamUserId")
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("TeamUser");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskLog", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.TeamUser", "AffectedTeamUser")
                        .WithMany("AffectedTaskLogs")
                        .HasForeignKey("AffectedTeamUserId");

                    b.HasOne("ArslanProjectManager.Core.Models.LogCategory", "LogCategory")
                        .WithMany("TaskLogs")
                        .HasForeignKey("LogCategoryId")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.ProjectTask", "Task")
                        .WithMany("TaskLogs")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.TeamUser", "TeamUser")
                        .WithMany("TaskLogs")
                        .HasForeignKey("TeamUserId")
                        .IsRequired();

                    b.Navigation("AffectedTeamUser");

                    b.Navigation("LogCategory");

                    b.Navigation("Task");

                    b.Navigation("TeamUser");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskTag", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.ProjectTask", "Task")
                        .WithMany("TaskTags")
                        .HasForeignKey("TaskId")
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Team", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.User", "Manager")
                        .WithMany("Teams")
                        .HasForeignKey("ManagerId")
                        .IsRequired()
                        .HasConstraintName("FK_team_user");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TeamInvite", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.User", "InvitedBy")
                        .WithMany("TeamInvites")
                        .HasForeignKey("InvitedById")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.Team", "Team")
                        .WithMany("TeamInvites")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_team_invite_team");

                    b.Navigation("InvitedBy");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TeamUser", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.Role", "Role")
                        .WithMany("TeamUsers")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.Team", "Team")
                        .WithMany("TeamUsers")
                        .HasForeignKey("TeamId")
                        .IsRequired();

                    b.HasOne("ArslanProjectManager.Core.Models.User", "User")
                        .WithMany("TeamUsers")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Token", b =>
                {
                    b.HasOne("ArslanProjectManager.Core.Models.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.BoardTag", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.LogCategory", b =>
                {
                    b.Navigation("TaskLogs");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Project", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.ProjectTask", b =>
                {
                    b.Navigation("TaskComments");

                    b.Navigation("TaskLogs");

                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Role", b =>
                {
                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TaskCategory", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.Team", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("TeamInvites");

                    b.Navigation("TeamUsers");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.TeamUser", b =>
                {
                    b.Navigation("AffectedTaskLogs");

                    b.Navigation("ProjectTaskAppointees");

                    b.Navigation("ProjectTaskAppointers");

                    b.Navigation("TaskComments");

                    b.Navigation("TaskLogs");
                });

            modelBuilder.Entity("ArslanProjectManager.Core.Models.User", b =>
                {
                    b.Navigation("TeamInvites");

                    b.Navigation("TeamUsers");

                    b.Navigation("Teams");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
